test <- rename(data, V1 = Avg)
colnames(data$V1) <- "Average"
colnames(data)[1] <- "Average"
names(data)
colnames(data)[1] <- "V1"
head(names(data))
test <- colnames(data1)[1:2] <- c("subject", "activity")
head(test)
test <- data1
colnames(test)[1:2] <- c("subject", "activity")
head(test)
head(features)
test <- data
features1 <- select(features, V2)
features2 <- list(features1)
features2
colnames(test) <- features2
names(test)
unlist(features2)
class(features2)
as.vector(features2)
class(features2)
rm(features2)
test1 <- select(test, C(V1:V6, V41:V46, V81:V86, V121:V126, V161:V166, V201:V202, V214:V215, V227:V228, V240:V241, V253:V254, V266:V271, V294:V296, V345:V350, V373:V375, V424:V429, V452:V454, V503:V504, V513, V516:V517, V526, V529, V530, V539, V542, V543, V552))
head(names(test), 1)
test <- data
test1 <- select(test, C(V1:V6, V41:V46, V81:V86, V121:V126, V161:V166, V201:V202, V214:V215, V227:V228, V240:V241, V253:V254, V266:V271, V294:V296, V345:V350, V373:V375, V424:V429, V452:V454, V503:V504, V513, V516:V517, V526, V529, V530, V539, V542, V543, V552))
test1 <- select(test, V1:V6, V41:V46, V81:V86, V121:V126, V161:V166, V201:V202, V214:V215, V227:V228, V240:V241, V253:V254, V266:V271, V294:V296, V345:V350, V373:V375, V424:V429, V452:V454, V503:V504, V513, V516:V517, V526, V529, V530, V539, V542, V543, V552)
head(names(test1), 1)
rm(testsubject)
rm(trainsubject)
rm(testx)
rm(trainx)
rm(testy)
rm(trainy)
rm(test)
head(test1, 1)
data <- test1
rm(test1)
features <- as.character(features[2])
features <- read.table("C://Users/Christina/Documents/coursera/features.txt")
getwd()
features <- read.table("C:/Users/Christina/Documents/coursera/features.txt")
features <- read.table("C:/Users/Christina/Documents/coursera/UCI HAR Dataset/features.txt")
features <- as.character(features[,2])
q()
rm(list = ls())
data <- read.table("C:/Users/Christina/Documents/"averages_data.txt")
data <- read.table("C:/Users/Christina/Documents/averages_data.txt")
View(data)
View(data)
data <- read.table("C:/Users/Christina/Documents/tidy.txt")
View(data)
data <- read.table("C:/Users/Christina/Documents/tidyData.txt")
View(data)
data <- read.table("C:/Users/Christina/Documents/activity_average_data.txt")
View(data)
q()
rm(list = ls())
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
data(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
datasets(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(datsets)(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(datsets) data(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(datsets) data(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
datasets(movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
data(movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
rm(list = ls())
q()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 4, col = "red")
abline(h = .4, col = "red")
5
9
12
abline(h = .05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
point(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, NewCy)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
point(kmObj$centers, col = c("black", "red", "green"). pch = 3, cex = 3, lwd = 3)
point(kmObj$centers, col = c("black", "red", "green"). pch = 3, cex = 3, lwd = 3))
point(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kemeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R"), local = TRUE)
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(Facedata)
dim(faceData)
a1 <- (svd1$u %*% svd1$v) * svd1$d
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[,]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[,1]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[,1]
a1 <- svd1$u[,1] %*% t(svd1$v[,1]) * svd1$d[1]
myImage(a1)
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2]) * diag(svd1$d[1:2])
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% diag(svd1$d[1:2])
a2 <- svd1$u[,1:2] %*% t(svd1$v[,1:2]) %*% diag(svd1$d[1:2],)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
q()
library(swirl)
swirl()
skip()
midst <- dist(sub1[, 10:12])
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[, c(10:12, maxCon])
mdist <- dist(sub1[, c(10:12, maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab,col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kclust <- kmeans(sub1[, c(-562,563)], 6)
kclust <- kmeans(sub1[, -c(562,563)], 6)
kclust <- kmeans(sub1[, -c(562,563)], centers = 6)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying,1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
q()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
pmo
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), %Y/%m/%d)
dates <- as.Date(as.character(dates), %Y%m%d)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, Sate.Code == 36 & County.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & County.site %in% both)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pmsub0$sample.Value
x0sub <- pm0sub$sample.Value
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow - c(1,2), mar = c(4,4,2,1))
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Vale, State.Code, mean, na.rm = TRUE)
mn0 <- with(pm0, tapply(Sample.Vale, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Vale, State.Code, mean, na.rm = TRUE))
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2]), xlim = c(.5, 2.5))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3]5))
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(2, 52), mgr[,2], rep(2, 52), mrg[,3])
segments(rep(2, 52), mrg[,2], rep(2, 52), mrg[,3])
segments(rep(1, 52), mrg[,2], rep(2, 52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
q()
setwd("C:/Users/Christina/Documents/coursera/RepData_Peerassessment1")
dir()
library(dplyr)
library(ggplot2)
data <- read.csv("activity.csv")
# Load packages
library(dplyr)
library(ggplot2)
# 2. Format dates using as.Date()
data$date <- as.Date(data$date)
steps <- aggregate(steps ~ date, data, sum)
# 2. Using the output of the aggregate function we can create a histogram of total
#    number of steps by day
hist(steps$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# 3. Call a summary of the "steps"" to get the calculated mean and median of
#    the total number of steps per day
summary(steps)
interval <- aggregate(steps ~ interval, data, mean)
# Now plot interval as a line graph
ggplot(interval, aes(interval, steps)) + geom_line() +
xlab("Interval") + ylab("Avg. Steps") + ggtitle("Avg. Steps By Interval")
# Determine the maximum value of the mean number of steps to find the interval
interval[which.max(interval$steps), ]
table(is.na(data$steps))
# 2. Devise a strategy for filling in missing values. Since the mean of the
#    intervals was just calculated, I will use them.
# 3. Create new dataset with the missign values added in using the imputing
#   strategy.
class(interval)
names(interval)
names(data)
data1 <- data
data$steps <- ifelse(is.na(data$steps) == TRUE, interval$steps[interval$interval %in% data$interval], data$steps)
table(data$steps)
table(is.na(data$steps))
steps <- aggregate(steps ~ date, data, sum)
hist(steps$steps, xlab = "Number of Steps PerDay", ylab = "Count", main = "Total Steps Per Day Imputed Data", col = "blue")
summary(steps)
density(steps$steps, xlab = "Number of Steps PerDay", ylab = "Count", main = "Total Steps Per Day Imputed Data", col = "blue")
hist(steps$steps, freq = FALSE, xlab = "Number of Steps PerDay", ylab = "Count", main = "Total Steps Per Day Imputed Data", col = "blue")
summary(steps$steps)
summary(steps)
table(is.na(data$steps))
# 2. Devise a strategy for filling in missing values. Since the mean of the
#    intervals was just calculated, I will use them.
# 3. Create new dataset with the missign values added in using the imputing
#    strategy.
datanew <- data$steps <- ifelse(is.na(data$steps) == TRUE,
interval$steps[interval$interval %in% data$interval], data$steps)
# 4. Make a histogram of the total nubmer of steps and calculate the mean and
#    median number of steps per day.
stepsnew <- aggregate(steps ~ date, datanew, sum)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# Summary of the data set with imputed values to get new mean and median
summary(stepsnew$steps)
table(is.na(data$steps))
# 2. Devise a strategy for filling in missing values. Since the mean of the
#    intervals was just calculated, I will use them.
# 3. Create new dataset with the missign values added in using the imputing
#    strategy.
data$steps <- ifelse(is.na(data$steps) == TRUE,
interval$steps[interval$interval %in% data$interval], data$steps) <- datanew
# 4. Make a histogram of the total nubmer of steps and calculate the mean and
#    median number of steps per day.
stepsnew <- aggregate(steps ~ date, datanew, sum)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# Summary of the data set with imputed values to get new mean and median
summary(stepsnew$steps)
table(is.na(data$steps))
# 2. Devise a strategy for filling in missing values. Since the mean of the
#    intervals was just calculated, I will use them.
# 3. Create new dataset with the missign values added in using the imputing
#    strategy.
datanew <- data
data$steps <- ifelse(is.na(data$steps) == TRUE,
interval$steps[interval$interval %in% data$interval], data$steps)
# 4. Make a histogram of the total nubmer of steps and calculate the mean and
#    median number of steps per day.
stepsnew <- aggregate(steps ~ date, datanew, sum)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# Summary of the data set with imputed values to get new mean and median
summary(stepsnew$steps)
rm(data1)
summary(data$steps)
summary(steps$steps)
rm(list = ls())
data <- read.csv("activity.csv")
# Load packages
library(dplyr)
library(ggplot2)
# 2. Format dates using as.Date()
data$date <- as.Date(data$date)
steps <- aggregate(steps ~ date, data, sum)
# 2. Using the output of the aggregate function we can create a histogram of total
#    number of steps by day
hist(steps$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# 3. Call a summary of the "steps"" to get the calculated mean and median of
#    the total number of steps per day
summary(steps$steps)
interval <- aggregate(steps ~ interval, data, mean)
# Now plot interval as a line graph
ggplot(interval, aes(interval, steps)) + geom_line() +
xlab("Interval") + ylab("Avg. Steps") + ggtitle("Avg. Steps By Interval")
# Determine the maximum value of the mean number of steps to find the interval
interval[which.max(interval$steps), ]
table(is.na(data$steps))
# 2. Devise a strategy for filling in missing values. Since the mean of the
#    intervals was just calculated, I will use them.
# 3. Create new dataset with the missign values added in using the imputing
#    strategy.
datanew <- data
data$steps <- ifelse(is.na(data$steps) == TRUE,
interval$steps[interval$interval %in% data$interval], data$steps)
# 4. Make a histogram of the total nubmer of steps and calculate the mean and
#    median number of steps per day.
stepsnew <- aggregate(steps ~ date, datanew, sum)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# Summary of the data set with imputed values to get new mean and median
summary(stepsnew$steps)
str(steps)
str(stepsnew)
unique(steps$steps, stepsnew$steps)
length(unique(steps$steps, stepsnew$steps))
head(data)
head(datanew)
table(is.na(data$steps))
# 2. Devise a strategy for filling in missing values. Since the mean of the
#    intervals was just calculated, I will use them.
# 3. Create new dataset with the missign values added in using the imputing
#    strategy.
datanew <- data
datanew$steps <- ifelse(is.na(datanew$steps) == TRUE,
interval$steps[interval$interval %in% datanew$interval], datanew$steps)
# 4. Make a histogram of the total nubmer of steps and calculate the mean and
#    median number of steps per day.
stepsnew <- aggregate(steps ~ date, datanew, sum)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
# Summary of the data set with imputed values to get new mean and median
summary(stepsnew$steps)
summary(steps$steps)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(1,0,0,0.5))
hist(steps$steps, col = rgb(0,0,1,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(1,0,1,0.5))
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(1,0,1,0.8))
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(1,0,1,0.1))
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,0.1))
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,0.1))
hist(steps$steps, col = addTrans(cols,200), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,0.1))
hist(steps$steps, col = addTrans(cols,100), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,0.1))
hist(steps$steps, col = addTrans(cols,50), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,0.1))
hist(steps$steps, col = rgb(1,0,0,2.0), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,0.1))
hist(steps$steps, col = rgb(1,0,0,1), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,1))
hist(steps$steps, col = rgb(1,0,0,0.1), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = rgb(0,0,1,1))
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, col = "blue", add = T)
hist(stepsnew$steps, add = T)
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, col = "blue", add = T)
hist(stepsnew$steps, col = "red", add = T)
hist(steps$steps, col = rgb(1,0,0,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, col = "blue", add = T)
hist(stepsnew$steps, col = "red", add = T)
hist(steps$steps, col = rgb(0,0,1,0.5), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, col = "blue", add = T)
hist(stepsnew$steps, col = "red", add = T)
hist(steps$steps, col = rgb(0,0,1,0.1), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, col = "blue", add = T)
hist(stepsnew$steps, col = "red", add = T)
hist(steps$steps, col = rgb(0,0,1,0.9), add = T)
hist(stepsnew$steps, xlab = "Number of Steps Per Day", ylab = "Count",
main = "Total Steps Per Day", col = "red")
hist(steps$steps, col = "blue", add = T)
q()
